Below is a list of things that should be done, and a few ideas on how to do them.
Remove things from here once they are completed, and add it to changelog.txt

	- VFS : Have the kopen() and kclose() functions, which are open() and close()
	for kernel usage, let you open and close directories as well.

	- Scheduler : Fix the bug in the queue and semaphore functions. The bug is that
	if either a queue or semaphore is destroyed while there are tasks that are
	waiting on that queue/semaphore, they will stay blocked forever.

+	- Scheduler : Allow switch_task() to switch to user mode code with a parameter.
	Also allow for user-mode tasks in general, probably also adding things like
	kernel-stacks per process, pids, uids, gids, etc. etc.

+	- Userspace : Implement syscalls. Starting with exit(), open(), close(),
	read(), write() (in that order) seems appropriate. A syscall table needs
	to be made. An ELF parser, a program loader etc. need to be made.

+	- Scheduler : Proper memory should be allocated for tasks. This is going to
	become especially relevant when we need to allocate kernel stacks and cannot
	use the task's own stack for interrupts (i.e. userspace tasks). This could
	be integrated into the VMM's "page heap" thingy which provides page-aligned
	memory. Just like there, the memory would be broken up into same-sized blocks,
	(preferably page-sized) and they could be passed out as needed. The VMM
	could then rely on this new heao instead of having a huge heap of memory (pun intended)
	all to itself. Currently, only a page-long stack is allocated for tasks.

	- Heap : Extending the above, it is probably a good idea to allow different
	options for heaps. So that one could attempt to allocate from a different heap,
	and the heap structure could possibly have options to have the memory be
	aligned, and be made of similarly sized blocks. Possibly a field in the
	heap structure to indicate it has a bitmap instead of a linked list?

	- Memory manager : Put some locks in place, so that two processes cannot
	accidentally allocate the same physical/virtual pages. The same should
	probably also be done in the heap, because two processes kmalloc()'ing at
	the same time can have disastrous consequences.

	- Memory manager : The MM should be cleaned up a bit in general, especially
	the VMM. The PMM could be more efficient, but it's fine for now. The VMM reeks
	of being rushed, with several key functions (which are admittedly never even
	used so far) commented out with missing implementation.I have to admit, it
	kind of *is* rushed, so can't really blame anyone but myself for that.

	- Heap: Implement a more efficient heap algorithm. AVL trees look particularly
	interesting because allocation doesn't always require the creation of a new chunk,
	the overhead is small and it's O(log(N)), also it seems like a very elegant
	solution in general.
