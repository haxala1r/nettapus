Almost all of the virtual address space is left for application use.

All application data, code etc. MUST be here. If any address above 0xFFFFFF7000000000
is attempted to be accessed, then the kernel will refuse to load the executable
(and terminate the current task if an already loaded task attempts to access it)
      ^
      |
      |
      |
0xFFFFFF7000000000
      |
      |
      |--------> is left unmapped, so that if a task accidentally (or
      |          intentionally) overruns its stack, it triggers a page fault.
      |
0xFFFFFF7000001000
      |
      |
      |--------> is where a task's regular stack is mapped.
      |
      |
0xFFFFFF7000002000
      |
      |
      |--------> CURRENTLY UNUSED.
      |
      |
0xFFFFFF7FFFFFF000
      |
      |
      |--------> The kernel stack of the current task.
      |
      |
0xFFFFFF8000000000 and up is the kernel Page Directory Pointer table. This is always
mapped into every task's address space.

0xFFFFFFFF80000000
      |
      |
      |-------------> CURRENTLY UNUSED.
      |
      |
0xFFFFFFFF80200000
      |
      |
      |-------------> The kernel binary.
      |
      |
0xFFFFFFFF80400000
      |
      |
      |-------------> Kernel modules (this is currently unused, but planned).
      |
      |
0xFFFFFFFF90000000
      |
      |
      |-------------> Used to allocate space for paging structures (tables etc.)
      |
      |
0xFFFFFFFF90400000
      |
      |
      |-------------> CURRENTLY UNUSED.
      |
      |
0xFFFFFFFF98000000
      |
      |
      |-------------> this is the reserved area in solution #2 (see kernel_stack.txt)
      |
      |
0xFFFFFFFFA0000000
      |
      |
      |-------------> Kernel heap.
      |
      |
0xFFFFFFFFA0200000

The rest is currently unused, except for 0xFFFFFFFFFB000000, which is always
mapped to the linear framebuffer set up by the bootloader.
